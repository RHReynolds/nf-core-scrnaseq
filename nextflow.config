/*
========================================================================================
    nf-core/scrnaseq Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // generic options
    aligner           = 'alevin'
    bustools_correct  = true
    outdir            = './results'
    input             = ''
    save_reference    = false
    protocol          = '10XV3'
    save_merged_fastq = false

    // reference files
    genome_fasta      = false
    genome            = false
    gtf               = false
    transcript_fasta  = false

    // salmon alevin parameters
    barcode_whitelist = false
    txp2gene          = false

    // kallist bustools parameters
    kallisto_gene_map = false
    kallisto_index    = false
    skip_bustools     = false

    // STARsolo parameters
    star_index          = false
    star_ignore_sjdbgtf = false

    //Genome Defaults
    salmon_index = params.genome ? params.genomes[ params.genome ].salmon_index ?: false : false
    genome_fasta = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
    transcript_fasta = params.genome ? params.genomes[ params.genome ].transcript_fasta ?: false : false
    gtf = params.genome ? params.genomes[ params.genome ].gtf ?: false : false
    txp2gene = params.genome ? params.genomes[ params.genome ].txp2gene ?: false : false

    // Template Boilerplate options
    multiqc_config              = false
    skip_multiqc                = false
    email                       = false
    email_on_fail               = false
    max_multiqc_email_size      = 25.MB
    plaintext_email             = false
    monochrome_logs             = false
    help                        = false
    igenomes_base               = 's3://ngi-igenomes/igenomes/'
    tracedir                    = "${params.outdir}/pipeline_info"
    igenomes_ignore             = false


    validate_params             = true
    show_hidden_params          = false
    schema_ignore_params        = 'genomes,input_paths'
    publish_dir_mode            = 'copy'
    config_profile_name         = false
    enable_conda                = false
    seq_center                  = false

    // References
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes'
    igenomes_ignore            = false

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    max_multiqc_email_size     = '25.MB'

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes,modules'
    enable_conda               = false
    singularity_pull_docker_container = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames                  = [:]
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

profiles {
  conda {
    params.enable_conda = true
    docker.enabled = false
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud = false
    process.conda = "$projectDir/environment.yml"
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    fixOwnership = true
    // Add "docker." to "runOptions" to avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Found fix here: https://github.com/nf-core/tools/pull/351
    docker.runOptions = "-u \$(id -u):\$(id -g)"
    singularity.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
  }
  singularity {
    docker.enabled = false
    singularity.enabled = true
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = false
    singularity.autoMounts = true
  }
  podman {
    singularity.enabled = false
    docker.enabled = false
    podman.enabled = true
    shifter.enabled = false
    charliecloud = false
  }
  shifter {
    singularity.enabled = false
    docker.enabled = false
    podman.enabled = false
    shifter.enabled = true
    charliecloud.enabled = false
  }
  charliecloud {
    singularity.enabled = false
    docker.enabled = false
    podman.enabled = false
    shifter.enabled = false
    charliecloud.enabled = true
  }
  test { includeConfig 'conf/test.config' }
  test_kallisto { includeConfig 'conf/test_kallisto.config'}
  test_full { includeConfig 'conf/test_full.config' }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'nf-core/scrnaseq'
    author          = 'Peter J Bailey, Alexander Peltzer, Olga Botvinnik'
    homePage        = 'https://github.com/nf-core/scrnaseq'
    description     = 'Pipeline for processing of 10xGenomics single cell rnaseq data'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '2.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
